{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNIm59RIfZkvVru3JqZVGW3",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/25heeeeho/Homework/blob/main/Untitled174.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 110
        },
        "id": "-VMzNCPR1uXs",
        "outputId": "a218013e-8fec-43e2-c313-059d345564c9"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "unindent does not match any outer indentation level (<tokenize>, line 19)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<tokenize>\"\u001b[0;36m, line \u001b[0;32m19\u001b[0m\n\u001b[0;31m    except Exception as e:\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unindent does not match any outer indentation level\n"
          ]
        }
      ],
      "source": [
        "import socketserver\n",
        "\n",
        "HOST = ''\n",
        "PORT = 7777\n",
        "\n",
        "class MyTcpHandler(socketserver.BaseRequestHandler):\n",
        "  def handle(self):\n",
        "    print(f'[{self.client_address[0]}] 연결됨')\n",
        "\n",
        "    try:\n",
        "      while True:\n",
        "        self.data = self.request.recv(1024)\n",
        "        if self.data.encode()=='\\q':\n",
        "          print(f'[{self.client_address[0]}]사용자 종료')\n",
        "          return\n",
        "\n",
        "          print(f'수신 메시지[{self.data.decode()}]를 에코 전송')\n",
        "          self.request.sendall(self.data)\n",
        "     except Exception as e:\n",
        "       print(e)\n",
        "\n",
        "def runServer():\n",
        "  print('+++ 에코 서버를 시작합니다.')\n",
        "  print('+++ 에코 서버를 끝내려면 Ctrl-c를 누르세요.')\n",
        "\n",
        "  try:\n",
        "    server = socketserver.TCPServer((HOST,PORT),MyTCPHandler)\n",
        "    server.serve_forever()\n",
        "  except keyboardInterrupt:\n",
        "    print('--- 에코 서버를 종료합니다.')\n",
        "\n",
        "runServer()\n"
      ]
    }
  ]
}

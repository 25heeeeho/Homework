{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPDDLW/c74aQUAIDJ9RNLGK",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/25heeeeho/Homework/blob/main/Untitled187.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "Bf0tEG0NFSQL"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import csv"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "file = 'births.txt'\n",
        "years = range(1800,2012)\n",
        "pieces = []\n",
        "with open(file,'r') as f:\n",
        "  data = csv.reader(f,delimiter=',')\n",
        "  for d in data:\n",
        "    pieces.append(d)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "pXx3ndHpFbF6",
        "outputId": "12c405ab-9bca-4b81-9c7a-b27e4eeb99ab"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: 'births.txt'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-679543216.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0myears\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1800\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2012\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mpieces\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m   \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcsv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdelimiter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m','\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0md\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'births.txt'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = [int(year) for year,female,male in pieces]\n",
        "y1 = [int(female) for year,female,male in pieces]\n",
        "y2 = [int(male) for year,female,male in pieces]\n",
        "\n",
        "plt.plot(x,y1,'r-',label='여자아기')\n",
        "plt.plot(x,y2,'b-',label='남자아기')\n",
        "\n",
        "plt.ylim([0,2500000])\n",
        "curYticks,_=plt.yticks()\n",
        "plt.yticks(curYticks,[f'{y:,.0f}'for y in curYticks])\n",
        "\n",
        "plt.legend()\n",
        "plt.title('미국 연도별 성별 총 출생아수')\n",
        "plt.xlabel('연도')\n",
        "plt.ylabel('출생아수')\n",
        "plt.grid()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "r-31Y6RLF4p7",
        "outputId": "3d4464b1-025d-46e8-c1fd-8edb367a36b1"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 52636 (\\N{HANGUL SYLLABLE CUL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49373 (\\N{HANGUL SYLLABLE SAENG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50500 (\\N{HANGUL SYLLABLE A}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49688 (\\N{HANGUL SYLLABLE SU}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48120 (\\N{HANGUL SYLLABLE MI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44397 (\\N{HANGUL SYLLABLE GUG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50672 (\\N{HANGUL SYLLABLE YEON}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 46020 (\\N{HANGUL SYLLABLE DO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48324 (\\N{HANGUL SYLLABLE BYEOL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49457 (\\N{HANGUL SYLLABLE SEONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 52509 (\\N{HANGUL SYLLABLE CONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50668 (\\N{HANGUL SYLLABLE YEO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51088 (\\N{HANGUL SYLLABLE JA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45224 (\\N{HANGUL SYLLABLE NAM}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
